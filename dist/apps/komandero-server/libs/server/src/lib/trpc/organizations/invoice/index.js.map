{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/invoice/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const invoice = router({\n  get_invoices_between_dates: publicProcedure\n    .input(\n      z.object({\n        from: z.string(),\n        to: z.string(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ input }) => {\n      const { from, to, organization_id } = input;\n      const invoices = await prisma.invoice.findMany({\n        where: {\n          organization_id,\n          created_at: {\n            gte: new Date(from),\n            lte: new Date(to),\n          },\n        },\n      });\n      return { invoices };\n    }),\n  get_invoice_by_id: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ input }) => {\n      const { id, organization_id } = input;\n\n      const invoice = await prisma.invoice.findUniqueOrThrow({\n        where: {\n          organization_id,\n          id,\n        },\n        include: { invoice_line: true, organization_client: true },\n      });\n      return { invoice };\n    }),\n\n  //  PETICI\u00D3N PARA A\u00D1ADIR CLIENTE A FACTURA REVISAR\n  add_client_to_invoice: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_client_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ input }) => {\n      const { id, organization_client_id } = input;\n\n      const update_invoice = await prisma.invoice.update({\n        where: { id },\n        data: {\n          organization_client_id: organization_client_id,\n        },\n        include: {\n          invoice_line: true,\n          organization_client: true,\n        },\n      });\n\n      return { update_invoice };\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AAEhB,MAAM,cAAU,0BAAO;AAAA,EAC5B,4BAA4B,kCACzB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,MAAM,EAAE,OAAO;AAAA,MACf,IAAI,EAAE,OAAO;AAAA,MACb,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,MAAM,MAAM;AAC7B,UAAM,EAAE,MAAM,IAAI,gBAAgB,IAAI;AACtC,UAAM,WAAW,MAAM,qBAAO,QAAQ,SAAS;AAAA,MAC7C,OAAO;AAAA,QACL;AAAA,QACA,YAAY;AAAA,UACV,KAAK,IAAI,KAAK,IAAI;AAAA,UAClB,KAAK,IAAI,KAAK,EAAE;AAAA,QAClB;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,EAAE,SAAS;AAAA,EACpB,CAAC;AAAA,EACH,mBAAmB,kCAChB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,IAAI,EAAE,OAAO,EAAE,KAAK;AAAA,MACpB,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,MAAM,MAAM;AAC7B,UAAM,EAAE,IAAI,gBAAgB,IAAI;AAEhC,UAAMA,WAAU,MAAM,qBAAO,QAAQ,kBAAkB;AAAA,MACrD,OAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,MACA,SAAS,EAAE,cAAc,MAAM,qBAAqB,KAAK;AAAA,IAC3D,CAAC;AACD,WAAO,EAAE,SAAAA,SAAQ;AAAA,EACnB,CAAC;AAAA;AAAA,EAGH,uBAAuB,kCACpB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,IAAI,EAAE,OAAO,EAAE,KAAK;AAAA,MACpB,wBAAwB,EAAE,OAAO,EAAE,KAAK;AAAA,IAC1C,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,MAAM,MAAM;AAC7B,UAAM,EAAE,IAAI,uBAAuB,IAAI;AAEvC,UAAM,iBAAiB,MAAM,qBAAO,QAAQ,OAAO;AAAA,MACjD,OAAO,EAAE,GAAG;AAAA,MACZ,MAAM;AAAA,QACJ;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,cAAc;AAAA,QACd,qBAAqB;AAAA,MACvB;AAAA,IACF,CAAC;AAED,WAAO,EAAE,eAAe;AAAA,EAC1B,CAAC;AACL,CAAC;",
  "names": ["invoice"]
}
