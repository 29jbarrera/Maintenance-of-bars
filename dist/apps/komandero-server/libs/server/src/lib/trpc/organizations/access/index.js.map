{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/access/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { create } from 'domain';\n\nexport const access = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ input }) => {\n      const users_has_access =\n        await prisma.user_has_access_to_organization.findMany({\n          where: {\n            o_id: input.organization_id,\n          },\n          include: {\n            user: {\n              include: {\n                user_has_role_in_organization: {\n                  where: {\n                    o_id: input.organization_id,\n                  },\n                },\n              },\n            },\n          },\n          orderBy: {\n            u_id: 'desc',\n          },\n        });\n\n      const app_roles = await prisma.app_role.findMany();\n\n      const organization_name = await prisma.organization.findUniqueOrThrow({\n        where: {\n          id: input.organization_id,\n        },\n        select: {\n          name: true,\n        },\n      });\n\n      return { users_has_access, app_roles, organization_name };\n    }),\n\n  edit_access_role: publicProcedure\n    .input(\n      z.object({\n        u_id: z.string().uuid(),\n        o_id: z.string().uuid(),\n        role: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { u_id, o_id, role } = input;\n\n      const ifExists = await prisma.user_has_role_in_organization.findUnique({\n        where: {\n          u_id_o_id_role: {\n            u_id,\n            o_id,\n            role,\n          },\n        },\n        select: {\n          disabled: true,\n        },\n      });\n\n      if (!ifExists) {\n        const create_role = await prisma.user_has_role_in_organization.create({\n          data: {\n            o_id,\n            u_id,\n            role,\n          },\n        });\n\n        return create_role;\n      }\n\n      const updated_role = await prisma.user_has_role_in_organization.update({\n        where: {\n          u_id_o_id_role: {\n            u_id,\n            o_id,\n            role,\n          },\n        },\n        data: {\n          disabled: !ifExists.disabled,\n        },\n      });\n\n      return updated_role;\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AAGhB,MAAM,aAAS,0BAAO;AAAA,EAC3B,SAAS,kCACN;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,MAAM,MAAM;AAC7B,UAAM,mBACJ,MAAM,qBAAO,gCAAgC,SAAS;AAAA,MACpD,OAAO;AAAA,QACL,MAAM,MAAM;AAAA,MACd;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,UACJ,SAAS;AAAA,YACP,+BAA+B;AAAA,cAC7B,OAAO;AAAA,gBACL,MAAM,MAAM;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,SAAS;AAAA,QACP,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AAEH,UAAM,YAAY,MAAM,qBAAO,SAAS,SAAS;AAEjD,UAAM,oBAAoB,MAAM,qBAAO,aAAa,kBAAkB;AAAA,MACpE,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,MACZ;AAAA,MACA,QAAQ;AAAA,QACN,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AAED,WAAO,EAAE,kBAAkB,WAAW,kBAAkB;AAAA,EAC1D,CAAC;AAAA,EAEH,kBAAkB,kCACf;AAAA,IACC,EAAE,OAAO;AAAA,MACP,MAAM,EAAE,OAAO,EAAE,KAAK;AAAA,MACtB,MAAM,EAAE,OAAO,EAAE,KAAK;AAAA,MACtB,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAM,EAAE,MAAM,MAAM,KAAK,IAAI;AAE7B,UAAM,WAAW,MAAM,qBAAO,8BAA8B,WAAW;AAAA,MACrE,OAAO;AAAA,QACL,gBAAgB;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAED,QAAI,CAAC,UAAU;AACb,YAAM,cAAc,MAAM,qBAAO,8BAA8B,OAAO;AAAA,QACpE,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,MAAM,qBAAO,8BAA8B,OAAO;AAAA,MACrE,OAAO;AAAA,QACL,gBAAgB;AAAA,UACd;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,MACA,MAAM;AAAA,QACJ,UAAU,CAAC,SAAS;AAAA,MACtB;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,CAAC;AACL,CAAC;",
  "names": []
}
