{
  "version": 3,
  "sources": ["../../../../../../../../../libs/server/src/lib/trpc/utils/context.ts"],
  "sourcesContent": ["import * as trpc from '@trpc/server';\nimport { inferAsyncReturnType } from '@trpc/server';\nimport * as trpcNext from '@trpc/server/adapters/next';\nimport { decoke_and_verify_token } from './decoke-and-verify-token';\nimport { prisma } from '@komandero/prisma';\nimport { user_data } from '@prisma/client';\n\nexport async function createContext({\n  req,\n  res,\n}: trpcNext.CreateNextContextOptions) {\n  // Create your context based on the request object\n  // Will be available as `ctx` in all your resolvers\n\n  // This is just an example of something you might want to do in your ctx fn\n  async function getUserFromHeader() {\n    if (req.headers.authorization) {\n      const token: string = req.headers.authorization.split(' ')[1] ?? '';\n      return await decoke_and_verify_token(token);\n    }\n    return null;\n  }\n  const user = await getUserFromHeader();\n\n  return {\n    user,\n  };\n}\n\nexport function getUserIdFormContext(ctx: Context) {\n  if (!ctx || !ctx.user || !ctx.user.id) {\n    throw new trpc.TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'You must be logged in to do this',\n    });\n  }\n  return ctx.user.id;\n}\n\nexport type UserDataFromContext = user_data;\n\nexport async function getUserFromContext(\n  ctx: Context\n): Promise<UserDataFromContext> {\n  if (!ctx || !ctx.user || !ctx.user.id) {\n    throw new trpc.TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'You must be logged in to do this',\n    });\n  }\n\n  const user_id = ctx.user.id;\n  // TODO: modificar por user y user data y lanzar errr si el usuario est\u00E1 eliminado.\n  const user = await prisma.user_data.findFirst({\n    where: {\n      id: user_id,\n    },\n  });\n\n  if (!user) {\n    throw new trpc.TRPCError({\n      code: 'UNAUTHORIZED',\n      message: 'You must be logged in to do this',\n    });\n  }\n  return user;\n}\n\nexport type Context = inferAsyncReturnType<typeof createContext>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAsB;AAGtB,qCAAwC;AACxC,oBAAuB;AAGvB,eAAsB,cAAc;AAAA,EAClC;AAAA,EACA;AACF,GAAsC;AAKpC,iBAAe,oBAAoB;AACjC,QAAI,IAAI,QAAQ,eAAe;AAC7B,YAAM,QAAgB,IAAI,QAAQ,cAAc,MAAM,GAAG,EAAE,CAAC,KAAK;AACjE,aAAO,UAAM,wDAAwB,KAAK;AAAA,IAC5C;AACA,WAAO;AAAA,EACT;AACA,QAAM,OAAO,MAAM,kBAAkB;AAErC,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEO,SAAS,qBAAqB,KAAc;AACjD,MAAI,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI;AACrC,UAAM,IAAI,KAAK,UAAU;AAAA,MACvB,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,SAAO,IAAI,KAAK;AAClB;AAIA,eAAsB,mBACpB,KAC8B;AAC9B,MAAI,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI;AACrC,UAAM,IAAI,KAAK,UAAU;AAAA,MACvB,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAEA,QAAM,UAAU,IAAI,KAAK;AAEzB,QAAM,OAAO,MAAM,qBAAO,UAAU,UAAU;AAAA,IAC5C,OAAO;AAAA,MACL,IAAI;AAAA,IACN;AAAA,EACF,CAAC;AAED,MAAI,CAAC,MAAM;AACT,UAAM,IAAI,KAAK,UAAU;AAAA,MACvB,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACA,SAAO;AACT;",
  "names": []
}
