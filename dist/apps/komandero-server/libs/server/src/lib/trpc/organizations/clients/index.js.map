{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/clients/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { organizations } from '..';\n\nexport const clients = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ input }) => {\n      const clients = await prisma.organization_client.findMany({\n        where: {\n          organization_id: input.organization_id,\n        },\n      });\n      return { clients };\n    }),\n  create: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        name: z.string().min(3).max(20),\n        nif: z.string().length(9),\n        phone: z.string(),\n        email: z.string().min(3).max(20).email(),\n        address: z.string(),\n        cp: z.string(),\n        locality: z.string(),\n        province: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const clients = await prisma.organization_client.create({\n        data: {\n          organization_id: input.organization_id,\n          name: input.name,\n          nif: input.nif,\n          phone: input.phone,\n          email: input.email,\n          address: input.address,\n          cp: input.cp,\n          locality: input.locality,\n          province: input.province,\n        },\n      });\n      return [clients];\n    }),\n  edit: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        name: z.string().min(3).max(20),\n        nif: z.string().length(9),\n        phone: z.string(),\n        email: z.string().min(3).max(20).email(),\n        address: z.string(),\n        cp: z.string(),\n        locality: z.string(),\n        province: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, name, nif, phone, email, address, id, cp, locality, province } = input;\n\n      await prisma.organization_client.update({\n        where: {\n          id,\n          organization_id,\n        },\n        data: {\n          name,\n          nif,\n          phone,\n          email,\n          address,\n          cp,\n          locality,\n          province\n        },\n      });\n      return {};\n    }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const cliente = await prisma.organization_client.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n      return { cliente };\n    }),\n});\n"],
  "mappings": "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",
  "names": ["clients"]
}
