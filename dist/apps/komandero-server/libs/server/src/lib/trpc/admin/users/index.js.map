{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/admin/users/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { create_user } from '../../../firebase';\n\nexport const users = router({\n  get_users: publicProcedure.query(async ({ ctx }) => {\n    const users = await prisma.user.findMany({\n      select: {\n        id: true,\n        displayName: true,\n        uid: true,\n        email: true,\n      },\n      orderBy: {\n        created_at: 'desc',\n      },\n    });\n    return { users };\n  }),\n  view_user: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n      })\n    )\n    .query(async ({ ctx, input }) => {\n      const user = await prisma.user.findUnique({\n        where: {\n          id: input.id,\n        },\n      });\n      const organizations_have_access =\n        await prisma.user_has_access_to_organization.findMany({\n          where: {\n            u_id: input.id,\n          },\n          include: {\n            organization: true,\n          },\n        });\n\n      return {\n        user,\n        organizations_have_access,\n      };\n    }),\n  edit_display_name: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        displayName: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const user = await prisma.user.update({\n        where: {\n          id: input.id,\n        },\n        data: {\n          displayName: input.displayName,\n        },\n      });\n\n      return true;\n    }),\n  get_organizations_to_add_user: publicProcedure.query(async ({ ctx }) => {\n    const organizations = await prisma.organization.findMany({\n      select: {\n        id: true,\n        name: true,\n      },\n    });\n\n    return { organizations };\n  }),\n  add_user_to_organization: publicProcedure\n    .input(\n      z.object({\n        u_id: z.string().uuid(),\n        o_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const add_organization_to_user =\n        await prisma.user_has_access_to_organization.create({\n          data: {\n            u_id: input.u_id,\n            o_id: input.o_id,\n          },\n          include: {\n            organization: true,\n          }\n        });\n\n      return { add_organization_to_user };\n    }),\n  remove_user_to_organization: publicProcedure\n    .input(\n      z.object({\n        u_id: z.string().uuid(),\n        o_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { u_id, o_id } = input;\n\n      const remove_organization =\n        await prisma.user_has_access_to_organization.delete({\n          where: {\n            u_id_o_id: {\n              u_id,\n              o_id,\n            },\n          },\n        });\n\n      return true;\n    }),\n  toggle_user_on_organization: publicProcedure\n    .input(\n      z.object({\n        u_id: z.string().uuid(),\n        o_id: z.string().uuid(),\n        disabled: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const updated = await prisma.user_has_access_to_organization.update({\n        where: {\n          u_id_o_id: {\n            o_id: input.o_id,\n            u_id: input.u_id,\n          },\n        },\n        data: {\n          disabled: input.disabled,\n        },\n      });\n\n      return { success: !!updated };\n    }),\n  create_user: publicProcedure\n    .input(\n      z.object({\n        email: z.string().email(),\n        displayName: z.string(),\n        password: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { email, displayName, password } = input;\n      const _email = email.toLowerCase().trim();\n\n      await create_user({\n        displayName,\n        email: _email,\n        password,\n      });\n\n      return { success: true };\n    }),\n});\n"],
  "mappings": "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",
  "names": ["users"]
}
