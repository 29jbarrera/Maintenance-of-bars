{
  "version": 3,
  "sources": ["../../../../../../../../../libs/server/src/lib/trpc/organizations/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { products } from './products';\nimport { product_size } from './products-size-price';\nimport { printer_job } from './printer-job';\nimport { access } from './access';\nimport { products_categories } from './products_categories';\nimport { oidokocina } from './oidokocina';\nimport { LetterHead } from '@komandero/commons';\nimport { orders } from './orders';\nimport { qr } from './qr';\nimport { organization_commander } from './organization_commander';\nimport { ingredients } from './ingredients';\nimport { share } from './share';\nimport { clients } from './clients';\nimport { product_category } from './product-category';\nimport { invoice } from './invoice';\n\nexport const organizations = router({\n  create_organization: publicProcedure\n    .input(\n      z.object({\n        name: z.string(),\n        billing_identifier: z.string(),\n        billing_name: z.string(),\n        billing_address: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization = await prisma.organization.create({\n        data: {\n          name: input.name,\n          billing_identifier: input.billing_identifier,\n          billing_name: input.billing_name,\n          billing_address: input.billing_address,\n        },\n      });\n      return { organization };\n    }),\n  get_all: publicProcedure.query(async ({ ctx }) => {\n    const organizations = await prisma.organization.findMany({\n      select: {\n        id: true,\n        name: true,\n      },\n    });\n    return { organizations };\n  }),\n  view_organization: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n      })\n    )\n    .query(async ({ ctx, input }) => {\n      const organization = await prisma.organization.findUnique({\n        where: {\n          id: input.id,\n        },\n        select: {\n          id: true,\n          name: true,\n          billing_identifier: true,\n          billing_name: true,\n          billing_address: true,\n        },\n      });\n\n      const users_have_access =\n        await prisma.user_has_access_to_organization.findMany({\n          where: {\n            o_id: input.id,\n          },\n          include: {\n            user: true,\n          },\n        });\n\n      return {\n        organization,\n        users_have_access,\n      };\n    }),\n  get_organization_name: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n      })\n    )\n    .query(async ({ ctx, input }) => {\n      const organization = await prisma.organization.findUnique({\n        where: {\n          id: input.id,\n        },\n        select: {\n          name: true,\n        },\n      });\n\n      return organization;\n    }),\n  get_letterhead: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { letterhead } = await prisma.organization.findUniqueOrThrow({\n        where: {\n          id: input.id,\n        },\n        select: {\n          letterhead: true,\n        },\n      });\n      return { letterhead: letterhead as LetterHead[] };\n    }),\n  update_letterhead: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        letterhead: z.any(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization = await prisma.organization.update({\n        where: {\n          id: input.id,\n        },\n        data: {\n          letterhead: input.letterhead,\n        },\n      });\n      return { organization };\n    }),\n  access,\n  clients,\n  ingredients,\n  invoice,\n  products,\n  product_size,\n  products_categories,\n  product_category,\n  printer_job,\n  oidokocina,\n  orders,\n  qr,\n  organization_commander,\n  share,\n});\n"],
  "mappings": "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",
  "names": ["organizations"]
}
