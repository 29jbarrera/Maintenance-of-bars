{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/product-category/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const product_category = router({\n  get_by_id: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const category = await prisma.product_category.findUniqueOrThrow({\n        where: {\n          id: input.id,\n        },\n        include: {\n          product: true,\n          product_category_has_other_product_category_product_category_has_other_product_category_idToproduct_category:\n            {\n              include: {\n                product_category_product_category_has_other_product_category_pc_idToproduct_category:\n                  true,\n              },\n            },\n          product_category_has_other_product_category_product_category_has_other_product_category_pc_idToproduct_category:\n            {\n              include: {\n                product_category_product_category_has_other_product_category_idToproduct_category:\n                  true,\n              },\n            },\n        },\n      });\n      return { category };\n    }),\n\n  add_categories_that_modify: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        categories_ids: z.array(z.string().uuid()),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, categories_ids } = input;\n\n      let add_categories_that_modify = [];\n\n      for (const pc_id of categories_ids) {\n        const add =\n          await prisma.product_category_has_other_product_category.create({\n            data: {\n              pc_id,\n              id,\n            },\n          });\n\n        add_categories_that_modify.push(add);\n      }\n\n      return { add_categories_that_modify };\n    }),\n\n  delete_categories_that_modify: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        category_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, category_id } = input;\n\n      const removed_categories_that_modify =\n        await prisma.product_category_has_other_product_category.delete({\n          where: {\n            id_pc_id: {\n              id,\n              pc_id: category_id,\n            },\n          },\n        });\n\n      return { removed_categories_that_modify };\n    }),\n\n  edit_category_that_modify: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        category_id: z.string().uuid(),\n        o: z.number(),\n        pi: z.number(),\n        not_add_princing: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, category_id, ...dataToUpdate } = input;\n\n      const update_category =\n        await prisma.product_category_has_other_product_category.update({\n          where: {\n            id_pc_id: {\n              id: id,\n              pc_id: category_id,\n            },\n          },\n          data: dataToUpdate,\n        });\n      return { update_category };\n    }),\n\n  add_categories_that_use: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        categories_ids: z.array(z.string().uuid()),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, categories_ids } = input;\n\n      let add_categories_that_use = [];\n\n      for (const pc_id of categories_ids) {\n        const add =\n          await prisma.product_category_has_other_product_category.create({\n            data: {\n              pc_id: id,\n              id: pc_id,\n            },\n          });\n\n        add_categories_that_use.push(add);\n      }\n\n      return { add_categories_that_use };\n    }),\n\n  delete_categories_that_use: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        category_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, category_id } = input;\n\n      const delete_categories_that_use =\n        await prisma.product_category_has_other_product_category.delete({\n          where: {\n            id_pc_id: {\n              id: category_id,\n              pc_id: id,\n            },\n          },\n        });\n\n      return { delete_categories_that_use };\n    }),\n\n  edit_category_that_use: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        category_id: z.string().uuid(),\n        o: z.number(),\n        pi: z.number(),\n        not_add_princing: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, category_id, ...dataToUpdate } = input;\n\n      const update_category =\n        await prisma.product_category_has_other_product_category.update({\n          where: {\n            id_pc_id: {\n              id: category_id,\n              pc_id: id,\n            },\n          },\n          data: dataToUpdate,\n        });\n      return { update_category };\n    }),\n});\n"],
  "mappings": "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",
  "names": []
}
