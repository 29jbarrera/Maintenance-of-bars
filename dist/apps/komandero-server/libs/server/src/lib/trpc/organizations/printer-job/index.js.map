{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/printer-job/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const printer_job = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const printer_jobs = await prisma.printer_job.findMany({\n        where: { organization_id },\n      });\n      return { printer_jobs };\n    }),\n  reprint: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const printer_job = await prisma.printer_job.update({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n        data: {\n          done: false,\n        },\n      });\n      return { printer_job };\n    }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const printer_job = await prisma.printer_job.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n      return { printer_job };\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AAEhB,MAAM,kBAAc,0BAAO;AAAA,EAChC,SAAS,kCACN;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAM,kBAAkB,MAAM;AAC9B,UAAM,eAAe,MAAM,qBAAO,YAAY,SAAS;AAAA,MACrD,OAAO,EAAE,gBAAgB;AAAA,IAC3B,CAAC;AACD,WAAO,EAAE,aAAa;AAAA,EACxB,CAAC;AAAA,EACH,SAAS,kCACN;AAAA,IACC,EAAE,OAAO;AAAA,MACP,IAAI,EAAE,OAAO,EAAE,KAAK;AAAA,MACpB,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAMA,eAAc,MAAM,qBAAO,YAAY,OAAO;AAAA,MAClD,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,QACV,iBAAiB,MAAM;AAAA,MACzB;AAAA,MACA,MAAM;AAAA,QACJ,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AACD,WAAO,EAAE,aAAAA,aAAY;AAAA,EACvB,CAAC;AAAA,EACH,QAAQ,kCACL;AAAA,IACC,EAAE,OAAO;AAAA,MACP,IAAI,EAAE,OAAO,EAAE,KAAK;AAAA,MACpB,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAMA,eAAc,MAAM,qBAAO,YAAY,OAAO;AAAA,MAClD,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,QACV,iBAAiB,MAAM;AAAA,MACzB;AAAA,IACF,CAAC;AACD,WAAO,EAAE,aAAAA,aAAY;AAAA,EACvB,CAAC;AACL,CAAC;",
  "names": ["printer_job"]
}
