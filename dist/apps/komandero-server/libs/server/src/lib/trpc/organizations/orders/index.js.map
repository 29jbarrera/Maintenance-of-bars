{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/orders/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const orders = router({\n  order_of_organization: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const orders = await prisma.orders.findMany({\n        where: {\n          organization_id: input.organization_id,\n        },\n        orderBy: {\n          created_at: 'asc',\n        },\n      });\n      const eating_tables = await prisma.eating_tables.findMany({\n        where: {\n          organization_id: input.organization_id,\n        },\n      });\n\n      const eating_tables_groups = await prisma.eating_table_group.findMany({\n        where: {\n          organization_id: input.organization_id,\n        },\n        include: {\n          eating_tables: true\n        },\n      });\n\n      const users = await prisma.user.findMany({\n        where: {\n          user_has_access_to_organization: {\n            some: {\n              o_id: input.organization_id,\n            },\n          },\n        },\n        select: {\n          id: true,\n          displayName: true,\n          email: true,\n        },\n      });\n      return { orders, eating_tables, users, eating_tables_groups };\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AAEhB,MAAM,aAAS,0BAAO;AAAA,EAC3B,uBAAuB,kCACpB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAMA,UAAS,MAAM,qBAAO,OAAO,SAAS;AAAA,MAC1C,OAAO;AAAA,QACL,iBAAiB,MAAM;AAAA,MACzB;AAAA,MACA,SAAS;AAAA,QACP,YAAY;AAAA,MACd;AAAA,IACF,CAAC;AACD,UAAM,gBAAgB,MAAM,qBAAO,cAAc,SAAS;AAAA,MACxD,OAAO;AAAA,QACL,iBAAiB,MAAM;AAAA,MACzB;AAAA,IACF,CAAC;AAED,UAAM,uBAAuB,MAAM,qBAAO,mBAAmB,SAAS;AAAA,MACpE,OAAO;AAAA,QACL,iBAAiB,MAAM;AAAA,MACzB;AAAA,MACA,SAAS;AAAA,QACP,eAAe;AAAA,MACjB;AAAA,IACF,CAAC;AAED,UAAM,QAAQ,MAAM,qBAAO,KAAK,SAAS;AAAA,MACvC,OAAO;AAAA,QACL,iCAAiC;AAAA,UAC/B,MAAM;AAAA,YACJ,MAAM,MAAM;AAAA,UACd;AAAA,QACF;AAAA,MACF;AAAA,MACA,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,aAAa;AAAA,QACb,OAAO;AAAA,MACT;AAAA,IACF,CAAC;AACD,WAAO,EAAE,QAAAA,SAAQ,eAAe,OAAO,qBAAqB;AAAA,EAC9D,CAAC;AACL,CAAC;",
  "names": ["orders"]
}
