{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/coffe/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const coffe = router({\n  get_product_coffe: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { coffe_product_id } = await prisma.organization.findUniqueOrThrow({\n        where: {\n          id: input.organization_id,\n        },\n        select: {\n          coffe_product_id: true,\n        },\n      });\n\n      if (!coffe_product_id) {\n        return { coffe_product_id };\n      }\n\n      const product = await prisma.product.findFirst({\n        where: {\n          id: coffe_product_id,\n          organization_id: input.organization_id,\n        },\n        include: {\n          product_modification: {\n            include: {\n              app_product_modification: {\n                // TODO: Comprobar si realmente hace falta\n                include: {\n                  app_product_modification_group: true,\n                },\n              },\n            },\n          },\n        },\n      });\n\n      return {\n        coffe_product_id,\n        product,\n      };\n    }),\n  get_products_to_select_coffe: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const products = await prisma.product.findMany({\n        where: {\n          organization_id: input.organization_id,\n        },\n        select: {\n          id: true,\n          name: true,\n        },\n      });\n\n      return { products };\n    }),\n  set_product_coffe: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        product_id: z.string().uuid().nullable(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      // Set to null\n      if (!input.product_id) {\n        await prisma.organization.update({\n          where: {\n            id: input.organization_id,\n          },\n          data: {\n            coffe_product_id: null,\n          },\n        });\n\n        return true;\n      }\n\n      // Check if product exists\n      // Search if exist product\n      const product = await prisma.product.findUnique({\n        where: {\n          id: input.product_id,\n          organization_id: input.organization_id,\n        },\n      });\n\n      if (!product) {\n        throw new TRPCError({\n          code: 'CONFLICT',\n          message: 'Product not found',\n        });\n      }\n\n      await prisma.organization.update({\n        where: {\n          id: input.organization_id,\n        },\n        data: {\n          coffe_product_id: input.product_id,\n        },\n      });\n\n      return true;\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAA0B;AAC1B,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AAEhB,MAAM,YAAQ,0BAAO;AAAA,EAC1B,mBAAmB,kCAChB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAM,EAAE,iBAAiB,IAAI,MAAM,qBAAO,aAAa,kBAAkB;AAAA,MACvE,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,MACZ;AAAA,MACA,QAAQ;AAAA,QACN,kBAAkB;AAAA,MACpB;AAAA,IACF,CAAC;AAED,QAAI,CAAC,kBAAkB;AACrB,aAAO,EAAE,iBAAiB;AAAA,IAC5B;AAEA,UAAM,UAAU,MAAM,qBAAO,QAAQ,UAAU;AAAA,MAC7C,OAAO;AAAA,QACL,IAAI;AAAA,QACJ,iBAAiB,MAAM;AAAA,MACzB;AAAA,MACA,SAAS;AAAA,QACP,sBAAsB;AAAA,UACpB,SAAS;AAAA,YACP,0BAA0B;AAAA;AAAA,cAExB,SAAS;AAAA,gBACP,gCAAgC;AAAA,cAClC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,CAAC;AAAA,EACH,8BAA8B,kCAC3B;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,IACnC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAM,WAAW,MAAM,qBAAO,QAAQ,SAAS;AAAA,MAC7C,OAAO;AAAA,QACL,iBAAiB,MAAM;AAAA,MACzB;AAAA,MACA,QAAQ;AAAA,QACN,IAAI;AAAA,QACJ,MAAM;AAAA,MACR;AAAA,IACF,CAAC;AAED,WAAO,EAAE,SAAS;AAAA,EACpB,CAAC;AAAA,EACH,mBAAmB,kCAChB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,iBAAiB,EAAE,OAAO,EAAE,KAAK;AAAA,MACjC,YAAY,EAAE,OAAO,EAAE,KAAK,EAAE,SAAS;AAAA,IACzC,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAElC,QAAI,CAAC,MAAM,YAAY;AACrB,YAAM,qBAAO,aAAa,OAAO;AAAA,QAC/B,OAAO;AAAA,UACL,IAAI,MAAM;AAAA,QACZ;AAAA,QACA,MAAM;AAAA,UACJ,kBAAkB;AAAA,QACpB;AAAA,MACF,CAAC;AAED,aAAO;AAAA,IACT;AAIA,UAAM,UAAU,MAAM,qBAAO,QAAQ,WAAW;AAAA,MAC9C,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,QACV,iBAAiB,MAAM;AAAA,MACzB;AAAA,IACF,CAAC;AAED,QAAI,CAAC,SAAS;AACZ,YAAM,IAAI,wBAAU;AAAA,QAClB,MAAM;AAAA,QACN,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAEA,UAAM,qBAAO,aAAa,OAAO;AAAA,MAC/B,OAAO;AAAA,QACL,IAAI,MAAM;AAAA,MACZ;AAAA,MACA,MAAM;AAAA,QACJ,kBAAkB,MAAM;AAAA,MAC1B;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,CAAC;AACL,CAAC;",
  "names": []
}
