{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/admin/app-configs/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\n(BigInt.prototype as any)['toJson'] = function () {\n  return this.toString();\n};\n\nexport const app_configs = router({\n  product_modification_group: publicProcedure.query(async ({ ctx }) => {\n    const app_product_modifications_groups =\n      await prisma.app_product_modification_group.findMany({\n        orderBy: {\n          id: 'asc',\n        },\n      });\n    return {\n      app_product_modifications_groups: app_product_modifications_groups.map(\n        (r) => {\n          return {\n            ...r,\n            id: r.id.toString(),\n          };\n        }\n      ),\n    };\n  }),\n  update_product_modification_group: publicProcedure\n    .input(\n      z.object({\n        id: z.number(),\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, name } = input;\n\n      const _id = BigInt(id);\n\n      const updated = await prisma.app_product_modification_group.update({\n        where: {\n          id: _id,\n        },\n        data: {\n          name,\n        },\n      });\n\n      const updated_group = {\n        id: updated.id.toString(),\n        name: updated.name,\n      };\n\n      return { updated_group };\n    }),\n  product_modifications_of_group: publicProcedure\n    .input(\n      z.object({\n        apmg: z.number(),\n      })\n    )\n    .query(async ({ ctx, input }) => {\n      const app_product_modifications =\n        await prisma.app_product_modification.findMany({\n          where: {\n            apmg: BigInt(String(input.apmg)),\n          },\n        });\n\n      return {\n        app_product_modifications: app_product_modifications.map((r) => {\n          return {\n            ...r,\n            id: r.id.toString(),\n            apmg: (r.apmg || '').toString(),\n          };\n        }),\n      };\n    }),\n\n  check_if_exist_product_id: publicProcedure\n    .input(z.number())\n    .mutation(async ({ ctx, input }) => {\n      const id = input;\n      const _id = BigInt(id);\n\n      const exist = await prisma.app_product_modification.findUnique({\n        where: {\n          id: _id,\n        },\n      });\n\n      \n      \n      return !!exist;\n    \n    }),\n  add_product_modification_to_group: publicProcedure\n    .input(\n      z.object({\n        id: z.number(),\n        apmg: z.number(),\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, apmg, name } = input;\n\n      const _id = BigInt(id);\n      const _apmg = BigInt(apmg);\n\n      const create = await prisma.app_product_modification.create({\n        data: {\n          id: _id,\n          apmg: _apmg,\n          name,\n        },\n      });\n\n      const app_product_modification = {\n        id: create.id.toString(),\n        apmg: (create.apmg || '').toString(),\n        name: create.name,\n      };\n\n      return { app_product_modification };\n    }),\n  update_product_modification_in_group: publicProcedure\n    .input(\n      z.object({\n        id: z.number(),\n        apmg: z.number(),\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, apmg, name } = input;\n\n      const _id = BigInt(id);\n      const _apmg = BigInt(apmg);\n\n      const update = await prisma.app_product_modification.update({\n        where: {\n          id: _id,\n        },\n        data: {\n          apmg: _apmg,\n          name,\n        },\n      });\n\n      const update_product_modification = {\n        id: update.id.toString(),\n        apmg: (update.apmg || '').toString(),\n        name: update.name,\n      };\n\n      return { update_product_modification };\n    }),\n  delete_product_modification_in_group: publicProcedure\n    .input(\n      z.object({\n        id: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id } = input;\n\n      const _id = BigInt(id);\n\n      const deleted = await prisma.app_product_modification.delete({\n        where: {\n          id: _id,\n        },\n      });\n\n      const deleted_product_modification = {\n        id: deleted.id.toString(),\n      };\n\n      return { deleted_product_modification };\n    }),\n});\n"],
  "mappings": "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",
  "names": []
}
