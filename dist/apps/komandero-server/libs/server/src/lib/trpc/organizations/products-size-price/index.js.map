{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/products-size-price/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { organizations } from '..';\n\nexport const product_size = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const product_sizes = await prisma.product_size.findMany({\n        where: { organization_id },\n        orderBy: {\n          qr_o: 'asc',\n        },\n      });\n      return { product_sizes };\n    }),\n  create: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        name: z.string().min(3).max(20),\n        qr_o: z.number().int().min(0),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product_size = await prisma.product_size.create({\n        data: {\n          organization_id: input.organization_id,\n          qr_o: input.qr_o,\n          name: input.name,\n        },\n      });\n      return { product_size };\n    }),\n  edit: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        name: z.string().min(1).max(20),\n        qr_o: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, organization_id, name, qr_o } = input;\n\n      await prisma.product_size.update({\n        where: {\n          id,\n          organization_id,\n        },\n        data: {\n          name,\n          qr_o,\n        },\n      });\n      return {};\n    }),\n    // edit_price: publicProcedure\n    // .input(\n    //   z.object({\n    //     id: z.string().uuid(),\n    //     organization_id: z.string().uuid(),\n    //     price: z.number(),\n    //   })\n    // )\n    // .mutation(async ({ ctx, input }) => {\n    //   const { id, organization_id, price } = input;\n\n    //   await prisma.product_size_price.update({\n    //     where: {\n    //       id,\n    //       organization_id,\n    //     },\n    //     data: {\n    //       price,\n    //     },\n    //   });\n    //   return {};\n    // }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product = await prisma.product_size.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n      return { product };\n    }),\n  save_order_category: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        product_size: z.array(\n          z.object({\n            id: z.string().uuid(),\n            qr_o: z.number(),\n          })\n        ),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, product_size } = input;\n\n      for (let _product_size of product_size) {\n        const { id, qr_o } = _product_size;\n\n        await prisma.product_size.update({\n          where: {\n            organization_id,\n            id,\n          },\n          data: {\n            qr_o,\n          },\n        });\n      }\n      return true;\n    }),\n});\n"],
  "mappings": "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",
  "names": ["product_size"]
}
