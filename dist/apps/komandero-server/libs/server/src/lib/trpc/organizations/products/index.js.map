{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/products/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { PriorityType } from '@komandero/commons';\n\nexport const products = router({\n  get_product_by_id: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, id } = input;\n      const product = await prisma.product.findUniqueOrThrow({\n        where: {\n          organization_id,\n          id,\n        },\n        include: {\n          product_size_price: {\n            include: {\n              product_size: true,\n            },\n          },\n          ingredient_product: {\n            include: {\n              ingredient: true,\n            },\n            orderBy: {\n              ingredient: {\n                name: 'asc',\n              },\n            },\n          },\n          product_modification: {\n            include: {\n              app_product_modification: true,\n            },\n            orderBy: {\n              app_product_modification: {\n                name: 'asc',\n              },\n            },\n          },\n        },\n      });\n\n      const categories = await prisma.product_category.findMany({\n        where: {\n          organization_id,\n        },\n        orderBy: {\n          priority_u: 'asc',\n        },\n      });\n\n      const _product = {\n        ...product,\n        product_modification: product.product_modification.map((m) => {\n          return {\n            ...m,\n            apm: m.apm.toString(),\n            app_product_modification: {\n              ...m.app_product_modification,\n              id: m.app_product_modification.id.toString(),\n              apmg: m.app_product_modification.apmg?.toString(),\n            },\n          };\n        }),\n      };\n\n      return {\n        _product,\n        categories,\n        product_size_price: product.product_size_price,\n      };\n    }),\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const _products = await prisma.product.findMany({\n        where: { organization_id },\n        // select: {\n        //   id: true,\n        //   name: true,\n        //   name_i: true,\n        //   priority: true,\n        //   priority_ko: true,\n        //   priority_u: true,\n        //   product_category_id: true,\n        //   price_pick_up: true,\n        //   price_delivery: true,\n        //   price_take_away: true,\n        // },\n        include: {\n          product_size_price: {\n            include: {\n              product_size: true,\n            },\n          },\n          product_modification: {\n            include: {\n              app_product_modification: true,\n            },\n          },\n          ingredient_product: {\n            include: {\n              ingredient: true,\n            },\n          },\n        },\n      });\n      const categories = await prisma.product_category.findMany({\n        where: {\n          organization_id,\n        },\n        orderBy: {\n          priority_u: 'asc',\n        },\n      });\n\n      const products = _products.map((product) => {\n        return {\n          ...product,\n          product_modification: product.product_modification.map((pm) => {\n            return {\n              ...pm,\n              apm: (pm.apm || '').toString(),\n              app_product_modification: {\n                ...pm.app_product_modification,\n                id: pm.app_product_modification.id.toString(),\n                apmg: (pm.app_product_modification.apmg || '').toString(),\n              },\n            };\n          }),\n        };\n      });\n      return { products, categories };\n    }),\n  get_all_to_reorder: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        products_ids: z.array(z.string().uuid()),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const products = await prisma.product.findMany({\n        where: {\n          organization_id,\n          id: {\n            in: input.products_ids,\n          },\n        },\n        select: {\n          id: true,\n          name: true,\n          priority: true,\n          priority_ko: true,\n          priority_u: true,\n        },\n      });\n      return products;\n    }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product_deleted = await prisma.product.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n      return { product_deleted };\n    }),\n  saver_order_waiter: publicProcedure\n    .input(\n      z.object({\n        products_to_save: z.array(\n          z.object({\n            id: z.string().uuid(),\n            priority_u: z.number(),\n          })\n        ),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const products = input.products_to_save;\n      let i = -1;\n      for (const product of products) {\n        const priority = products.slice(i)[0].priority_u;\n        i--;\n        await prisma.product.update({\n          where: { id: product.id },\n          data: { priority, priority_u: priority, priority_ko: priority },\n        });\n      }\n      return { products };\n    }),\n  create_product: publicProcedure\n    .input(\n      z.object({\n        name: z.string(),\n        name_i: z.string(),\n        price_take_away: z.number(),\n        price_delivery: z.number(),\n        price_pick_up: z.number(),\n        organization_id: z.string().uuid(),\n        product_category_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const {\n        name,\n        name_i,\n        price_take_away,\n        price_delivery,\n        price_pick_up,\n        organization_id,\n        product_category_id,\n      } = input;\n\n      const product_created = await prisma.product.create({\n        data: {\n          name,\n          name_i,\n          price_take_away,\n          price_delivery,\n          price_pick_up,\n          organization_id,\n          product_category_id,\n        },\n      });\n\n      return product_created;\n    }),\n  edit_product: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        name: z.string(),\n        name_i: z.string(),\n        price_take_away: z.number(),\n        price_delivery: z.number(),\n        price_pick_up: z.number(),\n        organization_id: z.string().uuid(),\n        product_category_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const updated_product = await prisma.product.update({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n        data: {\n          name: input.name,\n          name_i: input.name_i,\n          price_take_away: input.price_take_away,\n          price_delivery: input.price_delivery,\n          price_pick_up: input.price_pick_up,\n          organization_id: input.organization_id,\n          product_category_id: input.product_category_id,\n        },\n      });\n      return updated_product;\n    }),\n  get_by_id: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product = await prisma.product.findFirst({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n        include: {\n          product_size_price: {\n            include: {\n              product_size: true,\n            },\n          },\n          product_modification: {\n            include: {\n              app_product_modification: true,\n            },\n          },\n          ingredient_product: {\n            include: {\n              ingredient: true,\n            },\n          },\n        },\n      });\n      return product;\n    }),\n  get_products_with_ingredients: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const products = await prisma.product.findMany({\n        where: { organization_id },\n        orderBy: { name: 'desc' },\n        include: {\n          ingredient_product: {\n            orderBy: {\n              ingredient: {\n                name: 'asc',\n              },\n            },\n            include: {\n              ingredient: true,\n            },\n          },\n        },\n      });\n      return products;\n    }),\n  update_ingredient_product_active_or_desactive: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        ingredient_id: z.string().uuid(),\n        product_id: z.string().uuid(),\n        active: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, ingredient_id, product_id, active } = input;\n\n      const update = await prisma.ingredient_product.update({\n        data: {\n          default: !active,\n        },\n        where: {\n          ingredient_id_product_id: {\n            ingredient_id,\n            product_id,\n          },\n        },\n      });\n\n      return update;\n    }),\n  add_ingredient_to_product: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        ingredients_ids: z.array(z.string()),\n        product_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, ingredients_ids, product_id } = input;\n\n      let created_ingredients_to_product = [];\n\n      for (const ingredient_id of ingredients_ids) {\n        const created = await prisma.ingredient_product.create({\n          data: {\n            ingredient_id,\n            organization_id,\n            product_id,\n          },\n          include: {\n            ingredient: true,\n          },\n        });\n\n        created_ingredients_to_product.push(created);\n      }\n\n      return { created_ingredients_to_product };\n    }),\n  remove_ingredient_to_product: publicProcedure\n    .input(\n      z.object({\n        ingredient_id: z.string().uuid(),\n        product_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { ingredient_id, product_id } = input;\n\n      await prisma.ingredient_product.delete({\n        where: {\n          ingredient_id_product_id: {\n            ingredient_id,\n            product_id,\n          },\n        },\n      });\n\n      return true;\n    }),\n  edit_ingredient_to_product: publicProcedure\n    .input(\n      z.object({\n        ingredient_id: z.string().uuid(),\n        product_id: z.string().uuid(),\n        price: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { ingredient_id, product_id, price } = input;\n\n      const ingredient_updated = await prisma.ingredient_product.update({\n        where: {\n          ingredient_id_product_id: {\n            ingredient_id,\n            product_id,\n          },\n        },\n        data: {\n          price,\n        },\n      });\n\n      return { ingredient_updated };\n    }),\n\n  update_priority: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        products: z.array(\n          z.object({\n            id: z.string().uuid(),\n            num: z.number(),\n          })\n        ),\n        // prior only can 'priority' | 'priority_ko' | 'priority_u';\n        prior: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      for (const product of input.products) {\n        const { id, num } = product;\n        const prior: PriorityType = input.prior as PriorityType;\n        await prisma.product.update({\n          where: {\n            id,\n            organization_id: input.organization_id,\n          },\n          data: {\n            [prior]: num,\n          },\n        });\n      }\n\n      return { success: true };\n    }),\n  edit_product_size_price: publicProcedure\n    .input(\n      z.object({\n        product_size_id: z.string().uuid(),\n        product_id: z.string().uuid(),\n        price: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { product_size_id, product_id, price } = input;\n\n      const updated_product_size_price = await prisma.product_size_price.update(\n        {\n          where: {\n            product_id_product_size_id: {\n              product_size_id,\n              product_id,\n            },\n          },\n          data: {\n            price,\n          },\n          include: {\n            product_size: true,\n          },\n        }\n      );\n\n      return { updated_product_size_price };\n    }),\n  delete_product_size_prices: publicProcedure\n    .input(\n      z.object({\n        product_size_id: z.string().uuid(),\n        product_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { product_size_id, product_id } = input;\n\n      const product_size_deleted = await prisma.product_size_price.delete({\n        where: {\n          product_id_product_size_id: {\n            product_size_id,\n            product_id,\n          },\n        },\n      });\n\n      return { product_size_deleted };\n    }),\n  add_product_size_to_product: publicProcedure\n    .input(\n      z.object({\n        product_id: z.string().uuid(),\n        product_size_id: z.string().uuid(),\n        price: z.number(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { product_id, product_size_id, price, organization_id } = input;\n\n      const add_product_size_price = await prisma.product_size_price.create({\n        data: {\n          price,\n          organization_id,\n          product_id,\n          product_size_id,\n        },\n        include: {\n          product_size: true,\n        },\n      });\n      return { add_product_size_price };\n    }),\n  get_all_modifiers: publicProcedure.mutation(async ({ ctx, input }) => {\n    const modifiers_availables =\n      await prisma.app_product_modification_group.findMany({\n        include: { app_product_modification: true },\n      });\n\n    return modifiers_availables.map((modifier) => {\n      return {\n        id: modifier.id.toString(),\n        name: modifier.name,\n        app_product_modification: modifier.app_product_modification.map(\n          (modification: any) => ({\n            name: modification.name,\n            id: modification.id.toString(),\n            apmg: modification.apmg.toString(),\n          })\n        ),\n      };\n    });\n  }),\n  create_product_modification: publicProcedure\n    .input(\n      z.object({\n        p_id: z.string().uuid(),\n        apm: z.array(z.string()),\n        o: z.number(),\n        pi: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { p_id, apm, o, pi } = input;\n\n      const _apm_to_bigint = apm.map((a) => BigInt(a));\n\n      let modifiers_created = [];\n\n      for (const _apm of _apm_to_bigint) {\n        const create = await prisma.product_modification.create({\n          data: {\n            p_id,\n            apm: _apm,\n            o,\n            pi,\n          },\n          include: {\n            app_product_modification: true,\n          },\n        });\n\n        modifiers_created.push(create);\n      }\n\n      return modifiers_created.map((m) => {\n        return {\n          ...m,\n          apm: m.apm.toString(),\n          app_product_modification: {\n            ...m.app_product_modification,\n            id: m.app_product_modification.id.toString(),\n            apmg: m.app_product_modification.apmg?.toString(),\n          },\n        };\n      });\n    }),\n  edit_product_modification_by_id: publicProcedure\n    .input(\n      z.object({\n        p_id: z.string().uuid(),\n        apm: z.string(),\n        pi: z.number(),\n        o: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { p_id, apm, pi, o } = input;\n      const _apm_bigint = BigInt(apm);\n\n      const update = await prisma.product_modification.update({\n        where: {\n          p_id_apm: {\n            p_id,\n            apm: _apm_bigint,\n          },\n        },\n        data: {\n          pi,\n          o,\n        },\n        include: {\n          app_product_modification: true,\n        },\n      });\n\n      const updated_modification = {\n        ...update,\n        apm: update.apm.toString(),\n        app_product_modification: {\n          ...update.app_product_modification,\n          id: update.app_product_modification.id.toString(),\n          apmg: update.app_product_modification.apmg?.toString(),\n        },\n      };\n\n      return { updated_modification };\n    }),\n  remove_product_modification: publicProcedure\n    .input(\n      z.object({\n        p_id: z.string().uuid(),\n        apm: z.number(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { p_id, apm } = input;\n\n      const _apm = BigInt(apm);\n\n      const removed_product_modification =\n        await prisma.product_modification.delete({\n          where: {\n            p_id_apm: {\n              p_id,\n              apm: _apm,\n            },\n          },\n        });\n\n      return true;\n    }),\n  edit_order_and_visualization: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        product_category_id: z.string().uuid(),\n        priority: z.number(),\n        priority_ko: z.number(),\n        priority_u: z.number(),\n        qr_o: z.number(),\n        w_v: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const {\n        id,\n        organization_id,\n        product_category_id,\n        priority,\n        priority_ko,\n        priority_u,\n        qr_o,\n        w_v,\n      } = input;\n\n      const edit_order_and_visualization = await prisma.product.update({\n        where: {\n          id,\n          organization_id,\n          product_category_id,\n        },\n        data: {\n          priority,\n          priority_ko,\n          priority_u,\n          qr_o,\n          w_v,\n        },\n      });\n      return { edit_order_and_visualization };\n    }),\n});\n"],
  "mappings": "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",
  "names": ["products"]
}
