{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/admin/organizations/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\nimport { get_users_admin_ids } from '../utils';\n\nexport const organizations = router({\n  create: publicProcedure\n    .input(\n      z.object({\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const users_admin = await get_users_admin_ids();\n      const organization = await prisma.organization.create({\n        data: {\n          name: input.name,\n          user_has_access_to_organization: {\n            createMany: {\n              data: users_admin.map((user_id) => ({\n                u_id: user_id,\n              })),\n            },\n          },\n          // TODO: poner roles por defecto\n          user_has_role_in_organization: {\n            createMany: {\n              data: users_admin.map((user_id) => ({\n                role: 'user_manager',\n                u_id: user_id,\n              })),\n            },\n          },\n        },\n      });\n      return organization;\n    }),\n    edit_organization: publicProcedure\n    .input(\n      z.object({\n        id: z.string(),\n        billing_identifier: z.string(),\n        billing_name: z.string(),\n        billing_address: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      \n      const {id, billing_identifier, billing_name, billing_address} = input;\n\n      const update = await prisma.organization.update({\n        data: {\n          billing_identifier,\n          billing_address,\n          billing_name,\n        },\n        where: {\n          id\n        }\n      })\n\n      return update;\n    }),\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAIO;AACP,QAAmB;AACnB,oBAAuB;AACvB,mBAAoC;AAE7B,MAAM,oBAAgB,0BAAO;AAAA,EAClC,QAAQ,kCACL;AAAA,IACC,EAAE,OAAO;AAAA,MACP,MAAM,EAAE,OAAO;AAAA,IACjB,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAClC,UAAM,cAAc,UAAM,kCAAoB;AAC9C,UAAM,eAAe,MAAM,qBAAO,aAAa,OAAO;AAAA,MACpD,MAAM;AAAA,QACJ,MAAM,MAAM;AAAA,QACZ,iCAAiC;AAAA,UAC/B,YAAY;AAAA,YACV,MAAM,YAAY,IAAI,CAAC,aAAa;AAAA,cAClC,MAAM;AAAA,YACR,EAAE;AAAA,UACJ;AAAA,QACF;AAAA;AAAA,QAEA,+BAA+B;AAAA,UAC7B,YAAY;AAAA,YACV,MAAM,YAAY,IAAI,CAAC,aAAa;AAAA,cAClC,MAAM;AAAA,cACN,MAAM;AAAA,YACR,EAAE;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT,CAAC;AAAA,EACD,mBAAmB,kCAClB;AAAA,IACC,EAAE,OAAO;AAAA,MACP,IAAI,EAAE,OAAO;AAAA,MACb,oBAAoB,EAAE,OAAO;AAAA,MAC7B,cAAc,EAAE,OAAO;AAAA,MACvB,iBAAiB,EAAE,OAAO;AAAA,IAC5B,CAAC;AAAA,EACH,EACC,SAAS,OAAO,EAAE,KAAK,MAAM,MAAM;AAElC,UAAM,EAAC,IAAI,oBAAoB,cAAc,gBAAe,IAAI;AAEhE,UAAM,SAAS,MAAM,qBAAO,aAAa,OAAO;AAAA,MAC9C,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,OAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO;AAAA,EACT,CAAC;AACL,CAAC;",
  "names": []
}
