{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/products_categories/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const products_categories = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const organization_id = input.organization_id;\n      const product_sizes = await prisma.product_category.findMany({\n        where: { organization_id },\n        orderBy: {\n          qr_o: 'asc',\n        },\n      });\n      return { product_sizes };\n    }),\n  create: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        name: z.string().min(3).max(20),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product_category = await prisma.product_category.create({\n        data: {\n          organization_id: input.organization_id,\n          name: input.name,\n        },\n      });\n      return { product_category };\n    }),\n  edit: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        name: z.string().min(3).max(20),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      await prisma.product_category.update({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n        data: {\n          name: input.name,\n        },\n      });\n      return {};\n    }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const product = await prisma.product_category.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n      return { product };\n    }),\n  save_order_category: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        categories: z.array(\n          z.object({\n            id: z.string().uuid(),\n            priority_u: z.number(),\n          })\n        ),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, categories } = input;\n\n      for (let _category of categories) {\n        const { id, priority_u } = _category;\n\n        await prisma.product_category.update({\n          where: {\n            organization_id,\n            id,\n          },\n          data: {\n            priority_u,\n          },\n        });\n      }\n\n      return true;\n    }),\n});\n"],
  "mappings": "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",
  "names": []
}
