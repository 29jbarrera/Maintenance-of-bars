{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/ingredients/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const ingredients = router({\n  get_all: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const ingredients = await prisma.ingredient.findMany({\n        where: { organization_id: input.organization_id },\n        orderBy: {\n          name: 'asc',\n        },\n      });\n\n      return { ingredients };\n    }),\n  create: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const ingredient_created = await prisma.ingredient.create({\n        data: {\n          organization_id: input.organization_id,\n          name: input.name,\n        },\n      });\n\n      return { ingredient_created };\n    }),\n  update: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n        name: z.string(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { id, organization_id, name } = input;\n\n      const ingredient_updated = await prisma.ingredient.update({\n        where: {\n          id,\n          organization_id,\n        },\n        data: {\n          name,\n        },\n      });\n\n      return { ingredient_updated };\n    }),\n  delete: publicProcedure\n    .input(\n      z.object({\n        id: z.string().uuid(),\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const igredient_deleted = await prisma.ingredient.delete({\n        where: {\n          id: input.id,\n          organization_id: input.organization_id,\n        },\n      });\n\n      return { igredient_deleted };\n    }),\n  update_ingredient_product_price: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        price: z.number(),\n        products_ids: z.array(z.string()),\n        ingredients_ids: z.array(z.string()),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, price, products_ids, ingredients_ids } = input;\n\n      for (const product_id of products_ids) {\n        for (const ingredient_id of ingredients_ids) {\n          const updated = await prisma.ingredient_product.upsert({\n            create: {\n              default: false,\n              ingredient_id,\n              organization_id,\n              price,\n              product_id,\n            },\n            update: {\n              price,\n            },\n            where: {\n              ingredient_id_product_id: {\n                ingredient_id,\n                product_id,\n              },\n            },\n          });\n        }\n      }\n\n      return true;\n    }),\n});\n"],
  "mappings": "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",
  "names": ["ingredients"]
}
