{
  "version": 3,
  "sources": ["../../../../../../../../../../libs/server/src/lib/trpc/organizations/qr/index.ts"],
  "sourcesContent": ["import { TRPCError } from '@trpc/server';\nimport {\n  getUserIdFormContext,\n  publicProcedure,\n  router,\n} from '@komandero/serverTRPC';\nimport * as z from 'zod';\nimport { prisma } from '@komandero/prisma';\n\nexport const qr = router({\n  //Categorias de productos\n  get_categories_of_products: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id } = input;\n      const categories = await prisma.product_category.findMany({\n        where: { organization_id },\n        orderBy: {\n          qr_o: 'asc',\n        },\n        select: {\n          id: true,\n          name: true,\n          qr_o: true,\n          qr_v: true,\n        },\n      });\n\n      return categories;\n    }),\n  // Cambiar orden de las categorias de productso\n  change_order_categories_of_products: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        id: z.string().uuid(),\n        qr_v: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, id, qr_v } = input;\n\n      const update_view_category = await prisma.product_category.update({\n        where: {\n          organization_id,\n          id,\n        },\n        data: {\n          qr_v: !qr_v,\n        },\n      });\n\n      return update_view_category;\n    }),\n\n  // Guardar orden de categorias\n  save_order_category: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        categories: z.array(\n          z.object({\n            id: z.string().uuid(),\n            qr_o: z.number(),\n          })\n        ),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, categories } = input;\n\n      for (let _category of categories) {\n        const { id, qr_o } = _category;\n\n        await prisma.product_category.update({\n          where: {\n            organization_id,\n            id,\n          },\n          data: {\n            qr_o,\n          },\n        });\n      }\n\n      return true;\n    }),\n\n  // Ver productos dentro de una categor\u00EDa\n  get_products_within_category: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        product_category_id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, product_category_id } = input;\n\n      const products = await prisma.product.findMany({\n        where: {\n          organization_id,\n          product_category_id,\n        },\n        select: {\n          id: true,\n          name: true,\n          qr_o: true,\n          qr_v: true,\n          product_allergen: true,\n        },\n        orderBy: {\n          qr_o: 'asc',\n        },\n      });\n\n      return products;\n    }),\n\n  // Ver nombre de una categor\u00EDa\n  get_name_of_category: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        id: z.string().uuid(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, id } = input;\n\n      const category = await prisma.product_category.findFirst({\n        where: {\n          organization_id,\n          id,\n        },\n        select: {\n          name: true,\n        },\n      });\n\n      return category;\n    }),\n\n  // Cambiar orden de productos de una categor\u00EDa\n  change_order_of_products: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        id: z.string().uuid(),\n        qr_v: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, id, qr_v } = input;\n\n      const update_view_category = await prisma.product.update({\n        where: {\n          organization_id,\n          id,\n        },\n        data: {\n          qr_v: !qr_v,\n        },\n      });\n\n      return update_view_category;\n    }),\n  // Guardar orden de productos de una categor\u00EDa\n  save_order_products: publicProcedure\n    .input(\n      z.object({\n        organization_id: z.string().uuid(),\n        products: z.array(\n          z.object({\n            id: z.string().uuid(),\n            qr_o: z.number(),\n          })\n        ),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { organization_id, products } = input;\n\n      for (let _product of products) {\n        const { id, qr_o } = _product;\n\n        await prisma.product.update({\n          where: {\n            organization_id,\n            id,\n          },\n          data: {\n            qr_o,\n          },\n        });\n      }\n\n      return true;\n    }),\n\n  change_allergen: publicProcedure\n    .input(\n      z.object({\n        product_id: z.string().uuid(),\n        a_id: z.number(),\n        active: z.boolean(),\n      })\n    )\n    .mutation(async ({ ctx, input }) => {\n      const { product_id, a_id, active } = input;\n\n      let allergen;\n\n      if (active) {\n        allergen = await prisma.product_allergen.delete({\n          where: {\n            product_id_a_id: {\n              product_id,\n              a_id,\n            },\n          },\n        });\n\n        return allergen;\n      }\n\n      allergen = await prisma.product_allergen.create({\n        data: {\n          product_id,\n          a_id,\n        },\n      });\n\n      return allergen;\n    }),\n\n  // Ver todos los alergenos\n  getAllAllergen: publicProcedure.mutation(async ({ ctx }) => {\n    const allergens = await prisma.allergen.findMany({});\n\n    return { allergens };\n  }),\n});\n"],
  "mappings": "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",
  "names": []
}
