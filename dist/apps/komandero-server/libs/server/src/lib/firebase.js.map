{
  "version": 3,
  "sources": ["../../../../../../../libs/server/src/lib/firebase.ts"],
  "sourcesContent": ["import { cert } from 'firebase-admin/app';\nimport * as firebase_admin from 'firebase-admin';\nimport { readFileSync } from 'fs';\nimport { sendMessageMarkdown } from './notifications';\nimport { prisma } from './prisma';\n\nexport let admin: firebase_admin.app.App;\n\ntry {\n  const serviceAccount = JSON.parse(\n    readFileSync('firebase-private-key.json', 'utf8')\n  );\n  admin = firebase_admin.initializeApp({\n    credential: cert(serviceAccount),\n  });\n  // admin\n  //   .auth()\n  //   .getUserByEmail('damian@kissandcode.com')\n  // .then((d) => console.log(d.displayName));\n} catch (error) {\n  console.error('Firebase no inicializado');\n}\n\nexport async function create_user(data: {\n  displayName: string;\n  email: string;\n  password: string;\n}) {\n  const { displayName, email, password } = data;\n\n  // Check if exists\n  const user = await admin\n    .auth()\n    .getUserByEmail(email)\n    .catch(() => null);\n  if (user) {\n    return {\n      user: {\n        uid: user.uid,\n        email: user.email,\n        displayName: user.displayName,\n      },\n      already_exist: true,\n    };\n  }\n\n  // Create and notify\n  const newUser = await admin.auth().createUser({\n    displayName,\n    email,\n    password,\n  });\n\n  console.log('Usuario creado:', newUser.email);\n  console.log('Usuario contrase\u00F1a:', password);\n  console.log('----------------');\n\n  const message = `Usuario creado`\n    .concat(`\\n email: \\`\\`\\`${newUser.email}\\`\\`\\``)\n    .concat(`\\n contrase\u00F1a: \\`\\`\\`${password}\\`\\`\\``);\n\n  await sendMessageMarkdown(message);\n\n  const user_bbdd_created = await prisma.user.create({\n    data: {\n      uid: newUser.uid,\n      email: newUser.email,\n      displayName: newUser.displayName,\n      mla: false,\n    },\n  });\n\n  // Update it\n  await prisma.user.update({\n    where: {\n      id: user_bbdd_created.id,\n    },\n    data: {\n      claims: {\n        'https://hasura.io/jwt/claims': {\n          'x-hasura-user-id': user_bbdd_created.id,\n          'x-hasura-firebase-id': newUser.uid,\n          'x-hasura-default-role': 'user',\n          'x-hasura-allowed-roles': ['user', 'anonymous'],\n        },\n      },\n    },\n  });\n\n  return {\n    user: {\n      uid: newUser.uid,\n      email: newUser.email,\n      displayName: newUser.displayName,\n    },\n    already_exist: false,\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAqB;AACrB,qBAAgC;AAChC,gBAA6B;AAC7B,2BAAoC;AACpC,oBAAuB;AAEhB,IAAI;AAEX,IAAI;AACF,QAAM,iBAAiB,KAAK;AAAA,QAC1B,wBAAa,6BAA6B,MAAM;AAAA,EAClD;AACA,UAAQ,eAAe,cAAc;AAAA,IACnC,gBAAY,iBAAK,cAAc;AAAA,EACjC,CAAC;AAKH,SAAS,OAAO;AACd,UAAQ,MAAM,0BAA0B;AAC1C;AAEA,eAAsB,YAAY,MAI/B;AACD,QAAM,EAAE,aAAa,OAAO,SAAS,IAAI;AAGzC,QAAM,OAAO,MAAM,MAChB,KAAK,EACL,eAAe,KAAK,EACpB,MAAM,MAAM,IAAI;AACnB,MAAI,MAAM;AACR,WAAO;AAAA,MACL,MAAM;AAAA,QACJ,KAAK,KAAK;AAAA,QACV,OAAO,KAAK;AAAA,QACZ,aAAa,KAAK;AAAA,MACpB;AAAA,MACA,eAAe;AAAA,IACjB;AAAA,EACF;AAGA,QAAM,UAAU,MAAM,MAAM,KAAK,EAAE,WAAW;AAAA,IAC5C;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,UAAQ,IAAI,mBAAmB,QAAQ,KAAK;AAC5C,UAAQ,IAAI,0BAAuB,QAAQ;AAC3C,UAAQ,IAAI,kBAAkB;AAE9B,QAAM,UAAU,iBACb,OAAO;AAAA,gBAAmB,QAAQ,KAAK,QAAQ,EAC/C,OAAO;AAAA,wBAAwB,QAAQ,QAAQ;AAElD,YAAM,0CAAoB,OAAO;AAEjC,QAAM,oBAAoB,MAAM,qBAAO,KAAK,OAAO;AAAA,IACjD,MAAM;AAAA,MACJ,KAAK,QAAQ;AAAA,MACb,OAAO,QAAQ;AAAA,MACf,aAAa,QAAQ;AAAA,MACrB,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AAGD,QAAM,qBAAO,KAAK,OAAO;AAAA,IACvB,OAAO;AAAA,MACL,IAAI,kBAAkB;AAAA,IACxB;AAAA,IACA,MAAM;AAAA,MACJ,QAAQ;AAAA,QACN,gCAAgC;AAAA,UAC9B,oBAAoB,kBAAkB;AAAA,UACtC,wBAAwB,QAAQ;AAAA,UAChC,yBAAyB;AAAA,UACzB,0BAA0B,CAAC,QAAQ,WAAW;AAAA,QAChD;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL,MAAM;AAAA,MACJ,KAAK,QAAQ;AAAA,MACb,OAAO,QAAQ;AAAA,MACf,aAAa,QAAQ;AAAA,IACvB;AAAA,IACA,eAAe;AAAA,EACjB;AACF;",
  "names": []
}
