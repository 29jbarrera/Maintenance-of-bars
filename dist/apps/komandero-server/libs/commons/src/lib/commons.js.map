{
  "version": 3,
  "sources": ["../../../../../../../libs/commons/src/lib/commons.ts"],
  "sourcesContent": ["export type LetterHead = {\n  align: string;\n  font: string;\n  size_x: number;\n  size_y: number;\n  style: string;\n  text: string;\n};\n\ntype IconsModulesHomeAdmin = {\n  [key: string]: string;\n};\n\ntype AllergensType = {\n  [key: number]: string;\n};\n\nconst ICONS_MODULES: IconsModulesHomeAdmin = {\n  'access': '/assets/icons/menu/access.png',\n  'printer-config': '/assets/icons/menu/printer-config.png',\n  'product-categories': '/assets/icons/menu/product-categories.png',\n  'product-sizes': '/assets/icons/menu/product-sizes.png',\n  'products': '/assets/icons/menu/products.png',\n  'products-reorder': '/assets/icons/menu/products-reorder.png',\n  'commander': '/assets/icons/menu/commander.png',\n  'qr': '/assets/icons/menu/qr.png',\n  'oidokocina': '/assets/icons/menu/oidokocina.png',\n  'organization-oidokocina': '/assets/icons/menu/organization-oidokocina.png',\n  'eating-tables-configuration': '/assets/icons/menu/eating-tables-configuration.png',\n  'orders': '/assets/icons/menu/orders.png',\n  'printer-jobs': '/assets/icons/menu/printer-jobs.png',\n  'invoices': '/assets/icons/menu/invoices.png',\n  'client': '/assets/icons/menu/client.png',\n  'ingredients': '/assets/icons/menu/ingredients.png',\n  'ingredients-masive-config': '/assets/icons/menu/ingredients-masive-config.png',\n  'configuration-ingredients-product': '/assets/icons/menu/configuration-ingredients-product.png'\n};\n\nexport function getIconOfModuleHomeAdmin(icon: string) {\n  return ICONS_MODULES[icon];\n}\n\nconst ALLERGENS: AllergensType = {\n  1: 'Altramuces',\n  2: 'Apio',\n  3: 'Cacahuetes',\n  4: 'Crustaceo',\n  5: 'Dioxido Azufre',\n  6: 'Frutos Cascara',\n  7: 'Gluten',\n  8: 'Huevo',\n  9: 'Lacteo',\n  10: 'Moluscos',\n  11: 'Mostaza',\n  12: 'Pescado',\n  13: 'Sesamo',\n  14: 'Soja',\n};\n\nexport function getNameOfAllergen(id: number) {\n  return ALLERGENS[id] || '';\n}\n\n// Funci\u00F3n que normaliza una cadena de texto\nexport function normaliceString(str: string) {\n  return (\n    str\n      // Separa los caracteres diacr\u00EDticos de sus letras base\n      .normalize('NFD')\n      // Elimina los caracteres diacr\u00EDticos que no est\u00E1n en la lista de caracteres de combinaci\u00F3n de diacr\u00EDticos del idioma espa\u00F1ol\n      .replace(\n        /([^n\\u0300-\\u036f]|n(?!\\u0303(?![\\u0300-\\u036f])))[\\u0300-\\u036f]+/gi,\n        '$1'\n      )\n      // Combina los caracteres diacr\u00EDticos con sus letras base nuevamente\n      .normalize()\n  );\n}\n// Funci\u00F3n que verifica si una cadena de texto est\u00E1 incluida en otra\nexport function stringOneIncludeInStringTwo(str1 = '', str2 = ''): boolean {\n  // Normaliza y convierte a min\u00FAsculas la cadena str1\n  const _str1 = normaliceString(str1).trim().toLowerCase();\n  // Normaliza y convierte a min\u00FAsculas la cadena str2\n  const _str2 = normaliceString(str2).trim().toLowerCase();\n  // Verifica si la cadena str1 est\u00E1 incluida en la cadena str2\n  return _str2.includes(_str1);\n}\n\nexport const STATUS_TYPE: string[] = ['PENDIENTE', 'PREPARADO', 'LISTO'];\n\nexport function checkStatus(status: string, exist: boolean) {\n  const isActive = exist ? 'opacity-full' : 'opacity-light';\n\n  switch (status) {\n    case 'PENDIENTE':\n      return `pending ${isActive}`;\n    case 'PREPARADO':\n      return `prepared ${isActive}`;\n    case 'LISTO':\n      return `ready ${isActive}`;\n    default:\n      return 'pending opacity-light';\n  }\n}\n\nexport function format_price_amount(amount: number) {\n  return amount.toFixed(2).replace('.', ',');\n}\n\nexport function cent_to_eur(amount: number) {\n  return amount / 100;\n}\n\nexport function eur_to_cent(amount: number) {\n  return Math.round(amount * 100);\n}\n\nexport function cent_to_eur_format(amount: number) {\n  return format_price_amount(cent_to_eur(amount));\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA,MAAM,gBAAuC;AAAA,EAC3C,UAAU;AAAA,EACV,kBAAkB;AAAA,EAClB,sBAAsB;AAAA,EACtB,iBAAiB;AAAA,EACjB,YAAY;AAAA,EACZ,oBAAoB;AAAA,EACpB,aAAa;AAAA,EACb,MAAM;AAAA,EACN,cAAc;AAAA,EACd,2BAA2B;AAAA,EAC3B,+BAA+B;AAAA,EAC/B,UAAU;AAAA,EACV,gBAAgB;AAAA,EAChB,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,eAAe;AAAA,EACf,6BAA6B;AAAA,EAC7B,qCAAqC;AACvC;AAEO,SAAS,yBAAyB,MAAc;AACrD,SAAO,cAAc,IAAI;AAC3B;AAEA,MAAM,YAA2B;AAAA,EAC/B,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,IAAI;AACN;AAEO,SAAS,kBAAkB,IAAY;AAC5C,SAAO,UAAU,EAAE,KAAK;AAC1B;AAGO,SAAS,gBAAgB,KAAa;AAC3C,SACE,IAEG,UAAU,KAAK,EAEf;AAAA,IACC;AAAA,IACA;AAAA,EACF,EAEC,UAAU;AAEjB;AAEO,SAAS,4BAA4B,OAAO,IAAI,OAAO,IAAa;AAEzE,QAAM,QAAQ,gBAAgB,IAAI,EAAE,KAAK,EAAE,YAAY;AAEvD,QAAM,QAAQ,gBAAgB,IAAI,EAAE,KAAK,EAAE,YAAY;AAEvD,SAAO,MAAM,SAAS,KAAK;AAC7B;AAEO,MAAM,cAAwB,CAAC,aAAa,aAAa,OAAO;AAEhE,SAAS,YAAY,QAAgB,OAAgB;AAC1D,QAAM,WAAW,QAAQ,iBAAiB;AAE1C,UAAQ,QAAQ;AAAA,IACd,KAAK;AACH,aAAO,WAAW,QAAQ;AAAA,IAC5B,KAAK;AACH,aAAO,YAAY,QAAQ;AAAA,IAC7B,KAAK;AACH,aAAO,SAAS,QAAQ;AAAA,IAC1B;AACE,aAAO;AAAA,EACX;AACF;AAEO,SAAS,oBAAoB,QAAgB;AAClD,SAAO,OAAO,QAAQ,CAAC,EAAE,QAAQ,KAAK,GAAG;AAC3C;AAEO,SAAS,YAAY,QAAgB;AAC1C,SAAO,SAAS;AAClB;AAEO,SAAS,YAAY,QAAgB;AAC1C,SAAO,KAAK,MAAM,SAAS,GAAG;AAChC;AAEO,SAAS,mBAAmB,QAAgB;AACjD,SAAO,oBAAoB,YAAY,MAAM,CAAC;AAChD;",
  "names": []
}
